@using System.Reactive.Linq
@using static System.Reactive.Linq.Observable;

@implements IDisposable

@inject IMessageService MessageService
@inject IUserService UserService

<div class="messenger">
    <div class="messenger__messages">
        @foreach (var message in Messages)
        {
            <MessageItem Message="message" CssClass="@(string.Equals(message.Username, User.Username) ? "me" : null)" />
        }
    </div>
    <form class="messenger__form" onsubmit="@SendMessage">
        <div class="field has-addons">
            <div class="control is-expanded">
                <input class="input" type="text" placeholder="Enter a message here..." disabled="@User.IsMuted" bind="@MessageInput" />
            </div>
            <div class="control">
                <button type="submit" class="button is-primary" disabled="@User.IsMuted">Send</button>
            </div>
        </div>
    </form>
</div>

@functions {
    [Parameter]
    private User User { get; set; }

    private IDisposable _messageObserver;
    private IDisposable _userUpdatedStream;

    IList<Message> Messages = new List<Message>();

    string MessageInput;

    protected override void OnInit()
    {
        _messageObserver = MessageService.GetMessageStream()
            .Subscribe(newMessage =>
            {
                AddMessage(newMessage);
                StateHasChanged();
            });

        _userUpdatedStream = UserService.GetUserUpdateStream(User.Username)
            .Subscribe((user) =>
            {
                Console.Out.WriteLine($"User {User.Username} changed mute status to {user.IsMuted}");
                User.IsMuted = user.IsMuted;
                StateHasChanged();
            });
    }

    public void Dispose()
    {
        _messageObserver.Dispose();
        _userUpdatedStream.Dispose();
    }

    private void AddMessage(Message message) => Messages.Add(message);

    private void SendMessage()
    {
        if (string.IsNullOrEmpty(MessageInput) || User.IsMuted) return;

        MessageService.SendMessage(User.Username, MessageInput);
        MessageInput = "";
    }
}